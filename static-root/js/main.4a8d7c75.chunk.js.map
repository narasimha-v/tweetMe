{"version":3,"sources":["logo.svg","tweets/components.jsx","loookup/components.js","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","TweetsComponent","props","textAreaRef","React","createRef","useState","newTweets","setNewTweets","className","onSubmit","event","preventDefault","tempNewTweets","content","current","value","likes","id","ref","name","required","type","TweetsList","tweetsInit","setTweetsInit","tweets","setTweets","useEffect","final","concat","length","callback","xhr","XMLHttpRequest","responseType","open","onload","response","status","onerror","message","send","loadTweets","map","item","index","Tweet","tweet","key","ActionButton","action","display","setLikes","style","view","onClick","App","src","logo","alt","Boolean","window","location","hostname","match","appEle","document","getElementById","tweetEle","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"wGAAAA,EAAOC,QAAU,IAA0B,kC,uKCGpC,SAASC,EAAgBC,GAC/B,IAAMC,EAAcC,IAAMC,YADY,EAEJC,mBAAS,IAFL,mBAE/BC,EAF+B,KAEpBC,EAFoB,KAUtC,OACC,yBAAKC,UAAWP,EAAMO,WACrB,yBAAKA,UAAU,eACd,0BAAMC,SAVY,SAACC,GACrBA,EAAMC,iBACN,IACIC,EAAa,CAAI,CAAEC,QADRX,EAAYY,QAAQC,MACKC,MAAO,EAAGC,GAAI,MAArC,mBAA+CX,IAChEC,EAAaK,GACbV,EAAYY,QAAQC,MAAQ,KAMzB,8BACCG,IAAKhB,EACLM,UAAU,eACVW,KAAK,QACLC,UAAU,IACX,4BAAQC,KAAK,SAASb,UAAU,wBAAhC,WAKF,kBAACc,EAAD,CAAYhB,UAAWA,KAKnB,SAASgB,EAAWrB,GAAQ,IAAD,EACGI,mBAAS,IADZ,mBAC1BkB,EAD0B,KACdC,EADc,OAELnB,mBAAS,IAFJ,mBAE1BoB,EAF0B,KAElBC,EAFkB,KAiBjC,OAdAC,qBAAU,WACT,IAAIC,EAAQ,YAAI3B,EAAMK,WAAWuB,OAAON,GACpCK,EAAME,SAAWL,EAAOK,QAC3BJ,EAAUE,KAET,CAACL,EAAYtB,EAAMK,UAAWmB,IACjCE,qBAAU,YCzCJ,SAAoBI,GAC1B,IAAMC,EAAM,IAAIC,eAIhBD,EAAIE,aADiB,OAErBF,EAAIG,KAJW,MACH,qCAIZH,EAAII,OAAS,WACZL,EAASC,EAAIK,SAAUL,EAAIM,SAE5BN,EAAIO,QAAU,WACbR,EAAS,CAAES,QAAS,kBAAoB,MAEzCR,EAAIS,ODkCHC,EALmB,SAACL,EAAUC,GACd,MAAXA,GACHd,EAAca,QAId,IACIZ,EAAOkB,KAAI,SAACC,EAAMC,GACxB,OACC,kBAACC,EAAD,CACCC,MAAOH,EACPpC,UAAU,sCACVwC,IAAKH,OAMF,SAASC,EAAM7C,GAAQ,IACrB8C,EAAqB9C,EAArB8C,MAAOvC,EAAcP,EAAdO,UACf,OACC,yBAAKA,UAAWA,GACf,2BAAIuC,EAAMlC,SACV,yBAAKL,UAAU,gBACd,kBAACyC,EAAD,CACCF,MAAOA,EACPG,OAAQ,CAAE7B,KAAM,OAAQ8B,QAAS,WAElC,kBAACF,EAAD,CACCF,MAAOA,EACPG,OAAQ,CAAE7B,KAAM,SAAU8B,QAAS,YAEpC,kBAACF,EAAD,CACCF,MAAOA,EACPG,OAAQ,CAAE7B,KAAM,UAAW8B,QAAS,eAOlC,SAASF,EAAahD,GAAQ,IAEnC8C,EAGG9C,EAHH8C,MAFkC,EAK/B9C,EAFHiD,OAAU7B,EAHwB,EAGxBA,KAAM8B,EAHkB,EAGlBA,QAChB3C,EACGP,EADHO,UAJkC,EAMTH,mBAAS0C,EAAM/B,OANN,mBAM5BA,EAN4B,KAMrBoC,EANqB,KAO7BC,EAAQ7C,GAAwB,4BAChC8C,EAAgB,SAATjC,EAAA,UAAqBL,EAArB,YAA8BmC,GAAYA,EAOvD,OACC,oCACC,4BAAQ3C,UAAW6C,EAAOE,QARR,SAAC7C,GACpBA,EAAMC,iBACO,SAATU,GACH+B,EAASpC,EAAQ,KAMfsC,I,0BEnFUE,MAbf,WACC,OACC,yBAAKhD,UAAU,OACd,4BAAQA,UAAU,cACjB,yBAAKiD,IAAKC,IAAMlD,UAAU,WAAWmD,IAAI,UAE1C,6BACC,kBAAC3D,EAAD,SCAgB4D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXN,IAAMC,EAASC,SAASC,eAAe,QACjCC,EAAWF,SAASC,eAAe,YAErCF,GACHI,IAASC,OACR,kBAAC,IAAMC,WAAP,KACC,kBAAC,EAAD,OAEDN,GAIEG,GACHC,IAASC,OACR,kBAAC,IAAMC,WAAP,KACC,kBAACvE,EAAD,OAEDoE,GD2GI,kBAAmBI,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMvC,c","file":"static/js/main.4a8d7c75.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState, useEffect } from 'react';\nimport { loadTweets } from '../loookup';\n\nexport function TweetsComponent(props) {\n\tconst textAreaRef = React.createRef();\n\tconst [newTweets, setNewTweets] = useState([]);\n\tconst handleSubmit = (event) => {\n\t\tevent.preventDefault();\n\t\tconst newVal = textAreaRef.current.value;\n\t\tlet tempNewTweets = [{ content: newVal, likes: 0, id: 975 }, ...newTweets];\n\t\tsetNewTweets(tempNewTweets);\n\t\ttextAreaRef.current.value = '';\n\t};\n\treturn (\n\t\t<div className={props.className}>\n\t\t\t<div className='col-12 my-3'>\n\t\t\t\t<form onSubmit={handleSubmit}>\n\t\t\t\t\t<textarea\n\t\t\t\t\t\tref={textAreaRef}\n\t\t\t\t\t\tclassName='form-control'\n\t\t\t\t\t\tname='tweet'\n\t\t\t\t\t\trequired={true}></textarea>\n\t\t\t\t\t<button type='submit' className='btn btn-primary my-3'>\n\t\t\t\t\t\tTweet\n\t\t\t\t\t</button>\n\t\t\t\t</form>\n\t\t\t</div>\n\t\t\t<TweetsList newTweets={newTweets} />\n\t\t</div>\n\t);\n}\n\nexport function TweetsList(props) {\n\tconst [tweetsInit, setTweetsInit] = useState([]);\n\tconst [tweets, setTweets] = useState([]);\n\tuseEffect(() => {\n\t\tlet final = [...props.newTweets].concat(tweetsInit);\n\t\tif (final.length !== tweets.length) {\n\t\t\tsetTweets(final);\n\t\t}\n\t}, [tweetsInit, props.newTweets, tweets]);\n\tuseEffect(() => {\n\t\tconst myCallback = (response, status) => {\n\t\t\tif (status === 200) {\n\t\t\t\tsetTweetsInit(response);\n\t\t\t}\n\t\t};\n\t\tloadTweets(myCallback);\n\t}, []);\n\treturn tweets.map((item, index) => {\n\t\treturn (\n\t\t\t<Tweet\n\t\t\t\ttweet={item}\n\t\t\t\tclassName='my-5 px-5 border bg-white text-dark'\n\t\t\t\tkey={index}\n\t\t\t/>\n\t\t);\n\t});\n}\n\nexport function Tweet(props) {\n\tconst { tweet, className } = props;\n\treturn (\n\t\t<div className={className}>\n\t\t\t<p>{tweet.content}</p>\n\t\t\t<div className='btn btn-goup'>\n\t\t\t\t<ActionButton\n\t\t\t\t\ttweet={tweet}\n\t\t\t\t\taction={{ type: 'like', display: 'Likes' }}\n\t\t\t\t/>\n\t\t\t\t<ActionButton\n\t\t\t\t\ttweet={tweet}\n\t\t\t\t\taction={{ type: 'unlike', display: 'Unlike' }}\n\t\t\t\t/>\n\t\t\t\t<ActionButton\n\t\t\t\t\ttweet={tweet}\n\t\t\t\t\taction={{ type: 'retweet', display: 'Retweet' }}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport function ActionButton(props) {\n\tconst {\n\t\ttweet,\n\t\taction: { type, display },\n\t\tclassName\n\t} = props;\n\tconst [likes, setLikes] = useState(tweet.likes);\n\tconst style = className ? className : 'btn btn-primary btn-small';\n\tconst view = type === 'like' ? `${likes} ${display}` : display;\n\tconst handleClick = (event) => {\n\t\tevent.preventDefault();\n\t\tif (type === 'like') {\n\t\t\tsetLikes(likes + 1);\n\t\t}\n\t};\n\treturn (\n\t\t<>\n\t\t\t<button className={style} onClick={handleClick}>\n\t\t\t\t{view}\n\t\t\t</button>\n\t\t</>\n\t);\n}\n","export function loadTweets(callback) {\n\tconst xhr = new XMLHttpRequest();\n\tconst method = 'GET';\n\tconst url = 'http://localhost:8000/api/tweets/';\n\tconst responseType = 'json';\n\txhr.responseType = responseType;\n\txhr.open(method, url);\n\txhr.onload = function () {\n\t\tcallback(xhr.response, xhr.status);\n\t};\n\txhr.onerror = function () {\n\t\tcallback({ message: 'Request Failed' }, 400);\n\t};\n\txhr.send();\n}\n","import React from 'react';\nimport { TweetsComponent } from './tweets';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n\treturn (\n\t\t<div className='App'>\n\t\t\t<header className='App-header'>\n\t\t\t\t<img src={logo} className='App-logo' alt='logo' />\n\t\t\t</header>\n\t\t\t<div>\n\t\t\t\t<TweetsComponent />\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { TweetsComponent } from '../src/tweets';\n\nconst appEle = document.getElementById('root');\nconst tweetEle = document.getElementById('tweetEle');\n\nif (appEle) {\n\tReactDOM.render(\n\t\t<React.StrictMode>\n\t\t\t<App />\n\t\t</React.StrictMode>,\n\t\tappEle\n\t);\n}\n\nif (tweetEle) {\n\tReactDOM.render(\n\t\t<React.StrictMode>\n\t\t\t<TweetsComponent />\n\t\t</React.StrictMode>,\n\t\ttweetEle\n\t);\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}